// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  email       String @unique
  name        String @db.Text
  password    String @db.Text
  role        Role @default(USER)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  createdGroups   Group[]
  createdProjects Project[]
  createdTasks    Task[]
  createdComments Comment[]

  groups          UsersOnGroups[]
  tasks           UsersOnTasks[]
  taskLogs        TaskLog[]

  @@map("users")
}
enum Role {
  USER
  STAFF
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int @map("creator_id")
  users UsersOnGroups[]

  @@map("groups")
}
model UsersOnGroups {
  user       User  @relation(fields: [userId], references: [id])
  userId     Int @map("user_id")
  group      Group @relation(fields: [groupId], references: [id])
  groupId    Int @map("group_id")
  role       GroupRole @default(MEMBER)
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, groupId])
  @@map("users_groups")
}
enum GroupRole {
  MEMBER
  MANAGER
}

model Project {
  id    Int @id @default(autoincrement())
  name  String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  
  tasks Task[]
  
  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int @map("creator_id")

  @@map("projects")
}

model Task {
  id           Int @id @default(autoincrement())
  name         String
  description  String? @db.Text
  status       Int @default(1)
  startDate    DateTime? @map("start_date")
  deadlineDate DateTime? @map("deadline_date")
  deliveryDate DateTime? @map("delivery_date")
  evaluateDate DateTime? @map("evaluate_date")

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  comments     Comment[]
  
  project      Project @relation(fields: [projectId], references: [id])
  projectId    Int @map("project_id")

  creator      User @relation(fields: [creatorId], references: [id])
  creatorId    Int @map("creator_id")

  taskLogs     TaskLog[]

  users        UsersOnTasks[]
  flags        FlagsOnTasks[]

  @@map("tasks")
}
model TaskLog {
  id              Int @id @default(autoincrement())

  previousStatus Int @map("previous_status")
  appliedStatus  Int @map("applied_status")

  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")

  task Task @relation(fields: [taskId], references: [id])
  taskId Int @map("task_id")

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  @@map("task_logs")
}
model UsersOnTasks {
  user       User  @relation(fields: [userId], references: [id])
  userId     Int @map("user_id")
  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int @map("task_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, taskId])
  @@map("users_tasks")
}

model Comment {
  id         Int @id @default(autoincrement())

  content    String @db.Text

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int @map("task_id")

  creator    User @relation(fields: [creatorId], references: [id])
  creatorId  Int @map("creator_id")

  @@map("comments")
}

model Flag {
  id    Int @id @default(autoincrement())
  name  String
  color String

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  tasks FlagsOnTasks[]

  @@map("flags")
}
model FlagsOnTasks {
  flag       Flag  @relation(fields: [flagId], references: [id])
  flagId     Int @map("flag_id")
  task       Task @relation(fields: [taskId], references: [id])
  taskId     Int @map("task_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([flagId, taskId])
  @@map("flags_tasks")
}